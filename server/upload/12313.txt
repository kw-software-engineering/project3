const express = require('express');
const router = express.Router();
const db = require('../db.js'); // DB 연결 모듈
const multer = require('multer');
const path = require('path');

// 파일 저장 경로 및 파일명 설정
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'upload/');  // 업로드 폴더
  },
  filename: function (req, file, cb) {
    cb(null, Date.now() + '-' + file.originalname);
  }
});
const upload = multer({ storage: storage });

// 자료 등록 (파일 포함)
router.post('/upload-post', upload.single('file'), (req, res) => {
  const { title, author, isPublic, content, lecture_id } = req.body;
  const filePath = req.file ? `/upload/${req.file.filename}` : null;

  const query = `
    INSERT INTO post (created_time, title, context, token, file, choice, lecture_id)
    VALUES (NOW(), ?, ?, ?, ?, 1, ?)
  `;
  db.query(query, [title, content, isPublic, filePath, lecture_id], (err) => {
    if (err) {
      console.error(err);
      return res.status(500).send('DB 저장 실패');
    }
    res.redirect('/html/board.html?lecture_id=' + lecture_id);
  });
});


// 특정 강의의 자료 목록 조회
router.get('/materials', (req, res) => {
  const lectureId = req.query.lecture_id;
  const query = "SELECT * FROM post WHERE choice = 1 AND lecture_id = ? ORDER BY id DESC";

  db.query(query, [lectureId], (err, rows) => {
    if (err) return res.status(500).send('DB Error');
    res.json(rows);
  });
});

// 가장 최근 자료 3개
router.get('/materials/latest', (req, res) => {
  const lectureId = req.query.lecture_id;
  const query = `
    SELECT * FROM post 
    WHERE choice = 1 AND lecture_id = ?
    ORDER BY created_time DESC
    LIMIT 3
  `;
  db.query(query, [lectureId], (err, results) => {
    if (err) return res.status(500).send('DB Error');
    res.json(results);
  });
});

// 전체 자료 목록
router.get('/materials', (req, res) => {
  const lectureId = req.query.lecture_id;
  const query = lectureId 
    ? "SELECT * FROM post WHERE choice = 1 AND lecture_id = ? ORDER BY id DESC"
    : "SELECT * FROM post WHERE choice = 1 ORDER BY id DESC";

  db.query(query, lectureId ? [lectureId] : [], (err, rows) => {
    if (err) return res.status(500).send('DB Error');
    res.json(rows);
  });
});

//게시글 조회
router.get('/materials/:id', (req, res) => {
  const postId = req.params.id;
  const query = "SELECT * FROM post WHERE id = ?";
  db.query(query, [postId], (err, rows) => {
    if (err) return res.status(500).send('DB Error');
    if (rows.length === 0) return res.status(404).send('게시글 없음');
    res.json(rows[0]);
  });
});

// 공지사항 리스트
router.get('/notice', (req, res) => {
  db.query("SELECT * FROM post WHERE choice = 2 ORDER BY id DESC", (err, rows) => {
    if (err) return res.status(500).send('DB Error');
    res.json(rows);
  });
});

// 공지 조회
router.get('/notice/:id', (req, res) => {
  const id = req.params.id;
  db.query("SELECT * FROM post WHERE id = ? AND choice = 2", [id], (err, rows) => {
    if (err) return res.status(500).send('DB Error');
    res.json(rows[0]);
  });
});

module.exports = router;
